/*
* Filename: extra_udp.hpp
* Author: Zelin Liu
* Date: 2021/05/24
* Description:
* Instruction:
* Copyright (c). All rights reserved.
*/


#ifndef _EXTRA_UDP_EXTRA_UDP_HPP_
#define _EXTRA_UDP_EXTRA_UDP_HPP_
#include <vector>
#include <string>
#include <numeric>


struct Node{
public:
  std::string host;
  uint16_t port;
  bool is_ipv6;
  std::string port_string();
  std::string get_str();
  std::size_t get_hash();
};

class Extra_UDP{
public:
  Extra_UDP(Node & mynode);
  ~Extra_UDP();
  ssize_t send(Node *dest, void *msg, int32_t size);
  ssize_t recv_existing(Node *&src, bool want_sender_info, char* store_location, size_t len);
  ssize_t recv_malloc(Node* &src, bool want_sender_info, char* &store_location);
  const static uint16_t M_packet_original_size = <%=%Q| #{src_config["packet_original_size"]} |%>;
  const static uint16_t M_packet_meta_size = <%=%Q| #{src_config["packet_meta_size"]} |%>;
  const static uint16_t M_packet_data_size = M_packet_original_size - M_packet_meta_size;
private:
  int sock;
  char *meta_buffer;
  void init_sock(Node & mynode);
  /*
  const std::vector<std::pair<std::string, uint16_t>> header_format{

  };
  const uint16_t header_size = std::accumulate(this->header_format.begin(), this->header_format.end(), 0, [](size_t sum, const std::pair<std::string, uint16_t> p){return sum + p.second;});
  */
};


#endif
